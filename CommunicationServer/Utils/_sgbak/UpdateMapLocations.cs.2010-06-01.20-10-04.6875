using System;
using System.Collections.Generic;
using System.Text;
using log4net;
using System.Reflection;
using System.Threading;
using GlobSaldo.AVL.Entities;
using GlobSaldo.AVL.Data;
using GlobSaldo.AVL.Data.Bases;
using JP.Data.Utils;
using Taxi.Communication.Server.Containers;
using Taxi.Communication.Server.Utils.GeoFence;
using Microsoft.SqlServer.Types;
using System.Data.SqlClient;

using Taxi.Communication.Server.Classes;
using System.Configuration;
using GlobSaldo.GISDB.Entities;


namespace Taxi.Communication.Server.Utils
{
    public class UpdateMapLocations
    {
        private bool m_work;
        private static ILog log;
        private MapUtils m_mapUtils;
        private LocationSynchQueue m_locQueue;
        private string connStr;
        private Dictionary<long, GlobSaldo.AVL.Entities.Vehicle> dictVehicles = new Dictionary<long, GlobSaldo.AVL.Entities.Vehicle>();

        private Dictionary<long, VehicleRoute> _vehRoute = null;

        private bool checkForUnprocessed = false;

        public UpdateMapLocations(MapUtils mapUtils, LocationSynchQueue locQueue)
        {
            connStr = ConfigurationManager.ConnectionStrings["netTiersConnectionStringGISDB"].ConnectionString;
            m_work = true;
            log = LogManager.GetLogger("MyService");
            log.Debug("TEST");
            m_mapUtils = mapUtils;
            m_locQueue = locQueue;
            TList<GlobSaldo.AVL.Entities.Vehicle> tVehicles = DataRepository.VehicleProvider.GetAll();
            foreach (GlobSaldo.AVL.Entities.Vehicle tLocVeh in tVehicles)
            {
                dictVehicles.Add(tLocVeh.IDVehicle, tLocVeh);
            }
            checkForUnprocessed = true;

            populateRoutes(tVehicles);
        }

        #region RouteHandling

        private void populateRoutes(TList<Vehicle> lstVeh)
        {
            _vehRoute = new Dictionary<long, VehicleRoute>();

            foreach (Vehicle veh in lstVeh)
            {
                _vehRoute.Add(veh.IDVehicle, new VehicleRoute(veh));
            }

        }

        public void populateRouteForVehicle(Vehicle veh)
        {
            if (_vehRoute.ContainsKey(veh.IDVehicle))
            {
                _vehRoute.Remove(veh.IDVehicle);
            }

            _vehRoute.Add(veh.IDVehicle, new VehicleRoute(veh));
        }

        private void checkRoute(Locations loc)
        {
            if (_vehRoute.ContainsKey(loc.IDVehicle))
            {
                _vehRoute[loc.IDVehicle].checkLocation(loc);
            }
        }

        #endregion

        public void getUnProcessedLocations()
        {
            TList<Locations> lstLoc = DataRepository.LocationsProvider.GetUnProcessedLocations();

            if (lstLoc == null)
            {
                checkForUnprocessed = false;
                return;
            }

            if (lstLoc.Count == 0)
            {
                checkForUnprocessed = false;
                return;
            }

            foreach (Locations loc in lstLoc)
            {
                m_locQueue.Enqueue(loc);
            }

        }

        public void start()
        {
            while (m_work)
            {
                if (checkForUnprocessed)
                {
                    //getUnProcessedLocations();
                }
                //log.Debug(DateTime.Now.ToLongTimeString() + " Pravam Update na lokacii");
                //Console.WriteLine("----  Update MapLocations  " + DateTime.Now.ToLongTimeString () );

                /*
                TList<GlobSaldo.AVL.Entities.Locations> lstLocations;
                LocationsParameterBuilder tLocBuilder = new LocationsParameterBuilder();
                tLocBuilder.AppendIsNull(GlobSaldo.AVL.Entities.LocationsColumn.IDGeoLocation);

                lstLocations = DataRepository.LocationsProvider.Find(tLocBuilder.GetParameters());
                 */
                //Console.WriteLine ("Vkupno " + lstLocations.Count.ToString () + " lokacii" );

                int queueLen = this.m_locQueue.Count();
                try
                {
                    while (queueLen > 0)
                    {

                        //log.Info("In Location Queue " + queueLen.ToString());
                        //Console.WriteLine("In Location Queue " + queueLen.ToString());
                        Locations loc = this.m_locQueue.Dequeue();
                        try
                        {

                            loc = checkForGeoLocationGIS(loc);

                            loc = checkForStationGIS(loc);

                            loc = checkForGeoFences(loc);

                            checkRoute(loc);

                            loc.IsProcessed = true;
                            DataRepository.LocationsProvider.Update(loc);
                        }
                        catch (Exception e)
                        {
                            log.Error("ERROR", e);
                            DataRepository.LocationsProvider.Delete(loc);
                            log.Info("Greska vo coordinati ID_Vehicle=" + loc.IDVehicle.ToString() + " X=" + loc.LongitudeX.ToString() + " Y=" + loc.LatitudeY.ToString());
                        }
                        queueLen = this.m_locQueue.Count();
                    }
                }
                catch (Exception e)
                {
                    log.Error("ERROR", e);
                }

                Thread.Sleep(25000);
            }
        }

        public Locations checkForGeoLocationGIS(Locations currLoc)
        {
            //DateTime tProcessStart = DateTime.Now;

            // currLoc.IDGeoLocation = m_mapUtils.GetIDGeoLocationForLocation((double)currLoc.LongitudeX, (double)currLoc.LatitudeY);

            clsGeoLocation currGeoLocation = m_mapUtils.GetGeoLocationForLocationGIS((double)currLoc.LongitudeX, (double)currLoc.LatitudeY);

            if (currGeoLocation != null)
            {
                currLoc.IDGeoLocation = (long)currGeoLocation.IDGeoLocation;
                currLoc.GeoLocation = currGeoLocation.GeoLocationName;
            }
            else
            {
                currLoc.IDGeoLocation = -1;
                currLoc.GeoLocation = "Непозната локација";
            }

            //    //PAZI, Tuka treba IDCOmpany za toa vozilo



            //currLoc.IDGeoFence = m_mapUtils.GetIDGeoFenceForLocation((double)currLoc.LongitudeX, (double)currLoc.LatitudeY, dictVehicles[currLoc.IDVehicle].IDCompany);
            //DataRepository.LocationsProvider.Update(currLoc);

            //TimeSpan tPominatoVreme = DateTime.Now.Subtract(tProcessStart);
            //Console.WriteLine("UPDATE MAP LOCATIONS Obraboteni " + iBroj.ToString() + " od vkupno " + lstLocations.Count.ToString() + " lokacii za " + tPominatoVreme.TotalSeconds.ToString("00.00") + " sekundi");

            return currLoc;
        }

        public Locations checkForGeoLocationDB(Locations currLoc)
        {
            Vehicle veh = DataRepository.VehicleProvider.GetByIDVehicle(currLoc.IDVehicle);

            VList<VGeoLocations> currGeoLocation = m_mapUtils.GetGeoLocationsForLocationDB((double)currLoc.LongitudeX, (double)currLoc.LatitudeY, veh.IDCompany);

            if (currGeoLocation.Count != 0)
            {
                currLoc.IDGeoLocation = (long)currGeoLocation[0].IDGeoLocation;
                currLoc.GeoLocation = currGeoLocation[0].GeoLocationName;
            }
            else
            {
                currLoc.IDGeoLocation = -1;
                currLoc.GeoLocation = "Непозната локација";
            }

            return currLoc;
        }


        public Locations checkForStationGIS(Locations currLoc)
        {
            bool retVal = false;

            retVal = m_mapUtils.GetIsTaxiAtStationGIS((double)currLoc.LongitudeX, (double)currLoc.LatitudeY);

            if (retVal == true)
            {
                currLoc.Station = true;
            }
            else
            {
                currLoc.Station = false;
            }

            return currLoc;
        }

        public Locations checkForStationDB(Locations currLoc)
        {
            bool retVal = false;

            retVal = m_mapUtils.GetIsTaxiAtStationDB((double)currLoc.LongitudeX, (double)currLoc.LatitudeY);

            if (retVal == true)
            {
                currLoc.Station = true;
            }
            else
            {
                currLoc.Station = false;
            }

            return currLoc;
        }


        public Locations checkForGeoFences(Locations loc)
        {
            long ID_LastGeofence;
            //GeoFencesStrategy gfStrategy;
            INotifyStrategy notificationStrategy;

            //TList<Locations> prevLoc =
            //    DataRepository.LocationsProvider.GetPreviousLocationByID_Location(loc.IDLocation);

            //selectGeoFences(loc, 1);


            Vehicle veh = DataRepository.VehicleProvider.GetByIDVehicle(loc.IDVehicle);
            if (veh.IDLastGeoFence != null)
            {
                ID_LastGeofence = (long)veh.IDLastGeoFence;
            }
            else
            {
                ID_LastGeofence = 0;
            }

            //check for GEO Fence
            TList<GeoFences> lstGeoFences = this.getGeofenceIdForLocation(loc, veh.IDCompany);



            if ((lstGeoFences != null) && (lstGeoFences.Count > 0))
            {

                TList<GeoFences> lstGeoFencesForVehicle =
                    DataRepository.GeoFencesProvider.GetByID_VehicleFromGeoFencesForVehicles(veh.IDVehicle);


                loc.IDGeoFence = lstGeoFences[0].IDGeoFence;
                loc.GeoFenceName = lstGeoFences[0].GeoFenceDescription;


                veh.IDLastGeoFence = loc.IDGeoFence;

                try
                {
                    DataRepository.VehicleProvider.Update(veh);
                }
                catch (Exception e)
                {
                    log.Error("ERROR:", e);
                }

                GeoFenceReport gfReport;

                foreach (GeoFences vehGeoFence in lstGeoFencesForVehicle)
                {

                    GeoFencesForVehicles gfVeh =
                        DataRepository.GeoFencesForVehiclesProvider.
                            GetByIDVehicleIDGeoFence(veh.IDVehicle, vehGeoFence.IDGeoFence);


                    notificationStrategy = NotifyStrategyFactory.getStrategy((GeoFencesStrategyList)gfVeh.IDGeoFencesStrategy);

                    if (notificationStrategy.isForNotification(loc, vehGeoFence, ID_LastGeofence))
                    {
                        gfReport = new GeoFenceReport();
                        gfReport.IDLocation = loc.IDLocation;
                        gfReport.IDGeoFence = vehGeoFence.IDGeoFence;
                        gfReport.IDVehicle = veh.IDVehicle;
                        gfReport.GeoFenceDescription = vehGeoFence.GeoFenceDescription;
                        gfReport.RegionName = loc.RegionName;
                        gfReport.LocalTime = loc.LocalTime;
                        gfReport.SystemTime = DateTime.Now;
                        gfReport.LatitudeY = loc.LatitudeY;
                        gfReport.LongitudeX = loc.LongitudeX;
                        gfReport.Speed = loc.Speed;
                        gfReport.IDGeoFencesStrategy = gfVeh.IDGeoFencesStrategy;
                        gfReport.IDGeoFenceNotification = gfVeh.IDGeoFenceNotification;

                        try
                        {
                            DataRepository.GeoFenceReportProvider.Save(gfReport);
                        }
                        catch (Exception e)
                        {
                            log.Error("ERROR:", e);
                        }


                        if (gfVeh.IDGeoFenceNotification != (long)GeoFenceNotificationList.NoNotification)
                        {
                            log.Debug("Notification for ID_Vehicle=" + veh.IDVehicle.ToString() + " and ID_GeoFence=" + vehGeoFence.IDGeoFence.ToString());
                        }
                        else
                        {
                            log.Debug("Without notify: Notification for ID_Vehicle=" + veh.IDVehicle.ToString() + " and ID_GeoFence=" + vehGeoFence.IDGeoFence.ToString());
                        }
                        //INotificationMethod notificationMethod = new MailNotification();
                        //notificationMethod.sendNotification();





                    }
                }

            }
            return loc;
        }


        public TList<GeoFences> getGeofenceIdForLocation(Locations loc, long ID_Company)
        {
            List<long> lst_ids = this.selectGeoFences(loc, ID_Company);
            TList<GeoFences> retVal = new TList<GeoFences>();

            GeoFences geoFance = null;

            foreach (long ID_GeoFence in lst_ids)
            {
                geoFance = DataRepository.GeoFencesProvider.GetByIDGeoFence(ID_GeoFence);
                if (geoFance != null)
                {
                    retVal.Add(geoFance);
                }
            }
            return retVal;
        }

        public void Stop()
        {
            this.m_work = false;
        }

        private List<long> selectGeoFences(Locations loc, long ID_Company)
        {
            //Microsoft.SqlServer.Types.SqlGeometry

            SqlConnection conn = new SqlConnection(this.connStr);
            conn.Open();

            SqlCommand cmd = new SqlCommand("getGeoFencesForCompanyLocation", conn);
            cmd.CommandType = System.Data.CommandType.StoredProcedure;

            SqlParameter desc = new SqlParameter();
            desc.Direction = System.Data.ParameterDirection.Input;
            desc.ParameterName = "@ID_Company";
            desc.SqlDbType = System.Data.SqlDbType.BigInt;
            desc.Value = ID_Company;



            SqlGeographyBuilder gLocationBuilder = new SqlGeographyBuilder();
            gLocationBuilder.SetSrid(4326);
            //gLocationBuilder.SetSrid(0);
            gLocationBuilder.BeginGeography(OpenGisGeographyType.Point);

            //gLocationBuilder.BeginFigure(41.999370, 21.408241 );

            gLocationBuilder.BeginFigure((double)loc.LongitudeX, (double)loc.LatitudeY);
            //gLocationBuilder.BeginFigure(21.406267, 41.999435);


            gLocationBuilder.EndFigure();
            gLocationBuilder.EndGeography();

            // Create the geometry parameter  
            SqlParameter pLocation =
               new SqlParameter("@point", gLocationBuilder.ConstructedGeography);
            pLocation.UdtTypeName = "geography";

            cmd.Parameters.Add(pLocation);
            cmd.Parameters.Add(desc);


            SqlDataReader reader = cmd.ExecuteReader();

            List<long> retVal = new List<long>();
            while (reader.Read())
            {
                retVal.Add((long)reader.GetSqlInt64(0));
                //log.Info(((long)reader.GetSqlInt64(0)).ToString());
            }

            reader.Close();
            conn.Close();
            return retVal;
        }

    }
}
